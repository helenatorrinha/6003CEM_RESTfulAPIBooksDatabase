openapi: 3.0.0
info:
  version: 1.0.0
  title: Back End Book Database API
  description: An API for a books database.
  contact:
    name: Helena Torrinha
    email: serranotoh@uni.coventry.ac.uk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000/api/v1'
    description: Development server
tags:
  - name: Authors
    description: API endpoints for author management.
  - name: Books
    description: API endpoints for book management.
  - name: Genres
    description: API endpoints for genre management.
  - name: Reviews
    description: API endpoints for review management.
  - name: Users
    description: API endpoints for user management.
  - name: Login
    description: User login.
paths:
  /authors/:
    get:
      tags:
        - Authors
      description: Get all authors.
      responses:
        '200':
          description: List of all authors.
        '404':
          description: No authors found in the DB.
        '500':
          description: Server error.
    post:
      tags:
        - Authors
      description: Create a new author.
      requestBody:
        description: All new author data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./author.json#/definitions/author
      responses:
        '403':
          description: Forbidden. Only admin users can create authors.
        '201':
          description: Author created
          content:
            application/json:
              schema:
                $ref: ./author.json#/definitions/authorCreated
        '404':
          description: Author not found in the DB.
  /authors/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the author
    get:
      tags:
        - Authors
      description:
        Get author by id.
      responses:
        '200':
          description: View of an author's record.
        '404':
          description: Author was not found in the database..
        '500':
          description: Server error.'
    put:
      tags:
        - Authors
      description:
        Update author by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can update authors.
        '200':
          description: Update confirmation.
        '400':
          description: Author not found in the DB.
        '500':
          description: Server error.
    delete:
      tags:
        - Authors
      description:
        Delete author by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can delete authors.'
        '200':
          description: Delete confirmation.
        '400':
          description: Author not found in the DB.
        '500': 
          description: Server error.
  /books/:
    get:
      tags:
        - Books
      description: Get all books.
      responses:
        '200':
          description: List of all books.
        '404':
          description: No books found in the database..
        '500':
          description: Server error.
    post:
      tags:
        - Books
      description: Create a new book.
      requestBody:
        description: All new book data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./book.json#/definitions/book
      responses:
        '403':
          description: Forbidden. Only admin users can create books.
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: ./book.json#/definitions/bookCreated
        '404':
          description: Book not found in the database.
        '500':
          description: Server error.   
  /books/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the book
    get:
      tags:
        - Books
      description:
        Get book by id.
      responses:
        '200':
          description: View of a book's record.
        '404':
          description: Book was not found in the database.
        '500':
          description: Server error.
    put:
      tags:
        - Books
      description:
        Update book by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can update books.
        '200':
          description: Update confirmation.
        '400':
          description: Book not found in the database.
        '500':
          description: Server error.
    delete:
      tags:
        - Books
      description:
        Delete book by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can delete books.
        '200':
          description: Delete confirmation.
        '400':
          description: Book not found in the database.
        '500':
          description: Server error.
  /genres/:
    get:
      tags:
        - Genres
      description: Get all genres.
      responses:
        '200':
          description: List of all genres.
        '404':
          description: No genres found in the database.
        '500':
          description: Server error.
    post:
      tags:
        - Genres
      description: Create a new genre.
      requestBody:
        description: All new genre data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./genre.json#/definitions/genre
      responses:
        '403':
          description: Forbidden. Only admin users can create genres.
        '201':
          description: Genre created
          content:
            application/json:
              schema:
                $ref: ./genre.json#/definitions/genreCreated
        '404':
          description: Genre not found in the database.
        '500':
          description: Server error.
  /genres/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the genre
    get:
      tags:
        - Genres
      description:
        Get genre by id.
      responses:
        '200':
          description: View of a genre's record.
        '404':
          description: Genre was not found in the database.
        '500':
          description: Server error.
    put:
      tags:
        - Genres
      description:
        Update genre by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can update genres.
        '200':
          description: Update confirmation.
        '400':
          description: Genre not found in the database.
        '500':
          description: Server error.
    delete:
      tags:
        - Genres
      description:
        Delete genre by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can delete genres.
        '200':
          description: Delete confirmation.
        '400':
          description: Genre not found in the database.
        '500':
          description: Server error.
  /reviews/:
    get:
      tags:
        - Reviews
      description: Get all reviews.
      responses:
        '200':
          description: List of all reviews.
        '404':
          description: No reviews found in the database.
        '500':
          description: Server error.
    post:
      tags:
        - Reviews
      description: Create a new review.
      requestBody:
        description: All new review data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./review.json#/definitions/review
      responses:
        '403':
          description: Forbidden. Only registered users can create reviews.
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: ./review.json#/definitions/reviewCreated
        '404':
          description: Review not found in the database.
        '500':
          description: Server error.
  /reviews/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the review
    get:
      tags:
        - Reviews
      description:
        Get review by book's id.
      responses:
        '200':
          description: View of a review's record.
        '404':
          description: Review was not found in the database.
        '500':
          description: Server error.
    put:
      tags:
        - Reviews
      description:
        Update review by ID.
      responses:
        '404':
          description: Review not found in the database.
        '403':
          description: Forbidden. Only the user that created the review can update it.
        '200':
          description: Update confirmation.
        '400':
          description: Review not found in the database.
        '500':
          description: Server error.
    delete:
      tags:
        - Reviews
      description:
        Delete review by ID.
      responses:
        '404':
          description: Review not found in the database.'
        '403':
          description: Forbidden. Only the user that created the review can delete it or an admin.
        '200':
          description: Delete confirmation.
        '400':
          description: Review not found in the database.
        '500':
          description: Server error.
  /users/: 
    get:
      tags:
        - Users
      description: Get all users.
      responses:
        '403':
          description: Forbidden. Only admin users can view all users.'
        '200':
          description: List of all users.
        '404':
          description: No users found in the database.
        '500':
          description: Server error.
    post:
      tags:
        - Users
      description: Create a new user.
      requestBody:
        description: All new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: ./user.json#/definitions/user
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: ./user.json#/definitions/userCreated
        '400':
          description: Bad request.
        '500':
          description: Server error.
  /users/{id}:  
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
        description: Numeric id of the user
    get:
      tags:
        - Users
      description:
        Get user by id.
      responses:
        '403':
          description: Forbidden. A user can only get its data and admin can get all the users.
        '200':
          description: View of a user's record.
        '404':
          description: User was not found in the database.
        '500':
          description: Server error.
    put:
      tags:
        - Users
      description:
        Update user by ID.
      responses:
        '403':
          description: Forbidden. A user can only update itself and admins can update any user.
        '200':
          description: Update confirmation.
        '400':
          description: User not found in the database.
        '500':
          description: Server error.
    delete:
      tags:
        - Users
      description:
        Delete user by ID.
      responses:
        '403':
          description: Forbidden. Only admin users can delete users.
        '200':
          description: Delete confirmation.
        '400':
          description: User not found in the database.
        '500':
          description: Server error.
  /login:
      post:
        tags:
          - Login
        description:
          Login to the system.
        requestBody:
          description: User login information
          required: true
          content:
            application/json:
              schema:
                $ref: ./login.json#/definitions/login
        responses:
          '200':
            description: User logged in successfully.
            content:
              application/json:
                schema:
                  $ref: ./login.json#/definitions/loggedIn
          '401':
            description: User login failed.
          '500':
            description: Internal server error.
